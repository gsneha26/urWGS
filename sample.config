#Independent Variables
#Requires User to modify

#Sample details
SAMPLE=HG002_r10_5khz_v3
SAMPLE_LOW=$(echo ${SAMPLE} | sed 's/_/-/g' | tr [:upper:] [:lower:])
BUCKET=gs://ultra_rapid_ph2_${SAMPLE_LOW}

#Basecalling & Alignment  setup
NUM_GPU_PER_BA_INSTANCE=8
NUM_BA_INSTANCE=16
READS_PER_POD5=10000	#As set in MinKnow
BASECALL_MODE=sup
BASECALL_MODEL=dna_r10.4.1_e8.2_400bps_sup@v4.2.0
BASECALL_QUALITY=0

#PMDV setup
NUM_PMD=20
DV=google		#google/parabricks
DV_MODEL=rows		#rows/none
BAM_MERGE=YES		#YES/NO

#Sniffles setup
NUM_SNIFFLES=1
NUM_SPECTRE=1
GENE_LIST_URL=${BUCKET}/gene_list.txt

#Log setup
EMAIL_UPDATE=NO
EMAIL_REC=
EMAIL_SENDER=

#Derived Variables
POD5_BUCKET=${BUCKET}/prom/
POD5_STATUS_BUCKET=${BUCKET}/upload_status.txt
BASECALL_ALIGN_OUTPUT_BUCKET=${BUCKET}/basecall_align_output
BASECALL_ALIGN_STATUS_BUCKET=${BUCKET}/basecall_align_status
BASECALL_ALIGN_UPDATES_BUCKET=${BUCKET}/basecall_align_logs/$(hostname)
BASECALL_ALIGN_LOG_BUCKET=${BUCKET}/sequencing_logs/$(hostname)
BASECALL_ALIGN_COMPLETE_STATUS_BUCKET=${BUCKET}/basecall_align_completion

CHR_BAM_BUCKET=${BUCKET}/chr_bam
BAM_STATUS_BUCKET=${BUCKET}/bam_status

PMDV_VCF_BUCKET=${BUCKET}/pmdv_${DV}_${DV_MODEL}_output
HP_BAM_BUCKET=${BUCKET}/HP_bam
PMDV_STATUS_BUCKET=${BUCKET}/pmdv_${DV}_${DV_MODEL}_status
PMDV_LOG_BUCKET=${BUCKET}/pmdv_${DV}_${DV_MODEL}_logs
PMDV_COMPLETE_STATUS_BUCKET=${BUCKET}/pmdv_completion

SNIFFLES_VCF_BUCKET=${BUCKET}/sniffles_output
SNIFFLES_STATUS_BUCKET=${BUCKET}/sniffles_status
SNIFFLES_LOG_BUCKET=${BUCKET}/sniffles_logs
SNIFFLES_COMPLETE_STATUS_BUCKET=${BUCKET}/sniffles_completion

SPECTRE_VCF_BUCKET=${BUCKET}/spectre_output
SPECTRE_STATUS_BUCKET=${BUCKET}/spectre_status
SPECTRE_LOG_BUCKET=${BUCKET}/spectre_logs
SPECTRE_COMPLETE_STATUS_BUCKET=${BUCKET}/spectre_completion

FINAL_OUTPUT_BUCKET=${BUCKET}/final_output
FINAL_OUTPUT_BUCKET_GC=gs://ultra_rapid_output/${SAMPLE}
ANNOTATION_COMPLETE_STATUS_BUCKET=${BUCKET}/annotation_completion

FC_ACTIVE=$(gcloud compute instances list --filter="name=$(hostname)" --format=list)
if [[ ! -z "$FC_ACTIVE" ]]; then
    FC=$(gcloud compute instances describe $(hostname) --zone=$(gcloud compute instances list --filter="name=($(hostname))" --format "value(zone)") --format=value"(metadata[FC])")
    email_basecall_align_update() {
    
      if [ $EMAIL_UPDATE == "YES" ]; then
        SUBJECT='ba-'${FC}' '${SAMPLE}' '$3' Update'
        echo $1 | cat - $2 | sponge $2
        cat $2 | sudo mail -s "$SUBJECT" -aFrom:${EMAIL_SENDER} ${EMAIL_REC}
      fi
    
    }
    
    add_basecall_align_update() {
      UPDATE_LINE="[$(TZ='America/Los_Angeles' date +%T)] "$1
      1>&2 echo $UPDATE_LINE
      echo $UPDATE_LINE >> $2
    }
    
    email_vc_update() {
    
      if [ $EMAIL_UPDATE == "YES" ]; then
        SUBJECT=$2' '${SAMPLE}' '$3' Update'
        echo "[$(TZ='America/Los_Angeles' date +%T)] "$1 | sudo mail -s "$SUBJECT" -aFrom:${EMAIL_SENDER} ${EMAIL_REC}
      fi
    
    }
    	
    email_annotation_update() {
    
      if [ $EMAIL_UPDATE == "YES" ]; then
        SUBJECT=${SAMPLE}' Annotation Update'
        echo "[$(TZ='America/Los_Angeles' date +%T)] "$1 | sudo mail -s "$SUBJECT" -aFrom:${EMAIL_SENDER} ${EMAIL_REC}
      fi
    
    }
fi
